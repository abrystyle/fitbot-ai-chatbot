#!/bin/bash

# üöÄ Fitness Chatbot - Script de desarrollo
# Equivalente a "ddev" para manejar todo el entorno

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funciones de utilidad
print_header() {
    echo -e "\n${BLUE}========================================${NC}"
    echo -e "${BLUE}üèãÔ∏è  Fitness Chatbot - Entorno de Desarrollo${NC}"
    echo -e "${BLUE}========================================${NC}\n"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Verificar dependencias
check_dependencies() {
    print_info "Verificando dependencias..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker no est√° instalado"
        exit 1
    fi
    
    # Verificar si tenemos docker-compose o docker compose
    if command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE="docker-compose"
    elif docker compose version &> /dev/null 2>&1; then
        DOCKER_COMPOSE="docker compose"
    else
        print_error "Docker Compose no est√° disponible"
        exit 1
    fi
    
    print_success "Dependencias verificadas (usando $DOCKER_COMPOSE)"
}

# Verificar archivos de entorno
check_env_files() {
    print_info "Verificando archivos de entorno..."
    
    if [ ! -f ".env" ]; then
        print_warning "Archivo .env no encontrado, creando desde .env.example..."
        if [ -f ".env.example" ]; then
            cp .env.example .env
        else
            print_error "No se encontr√≥ .env.example"
            exit 1
        fi
    fi
    
    print_success "Archivos de entorno listos"
}

# Comando start - levantar servicios
cmd_start() {
    print_header
    
    check_dependencies
    check_env_files
    
    print_info "Levantando servicios con Docker Compose..."
    $DOCKER_COMPOSE up -d --build
    
    print_success "üéâ Entorno de desarrollo iniciado correctamente!"
    echo ""
    
    print_info "Servicios disponibles:"
    echo "üåê Aplicaci√≥n Next.js: http://localhost:3000"
    echo "üóÑÔ∏è  Adminer (DB Admin): http://localhost:8080" 
    echo "üìä PostgreSQL: localhost:5432"
    echo "üî¥ Redis: localhost:6379"
    
    echo ""
    $DOCKER_COMPOSE ps
}

# Comando stop - detener servicios
cmd_stop() {
    check_dependencies
    print_info "Deteniendo servicios..."
    $DOCKER_COMPOSE down
    print_success "Servicios detenidos"
}

# Comando restart - reiniciar servicios
cmd_restart() {
    check_dependencies
    print_info "Reiniciando servicios..."
    $DOCKER_COMPOSE restart
    print_success "Servicios reiniciados"
}

# Comando logs - mostrar logs
cmd_logs() {
    check_dependencies
    print_info "Mostrando logs..."
    $DOCKER_COMPOSE logs -f
}

# Comando db - conectar a PostgreSQL
cmd_db() {
    check_dependencies
    print_info "Conectando a PostgreSQL..."
    $DOCKER_COMPOSE exec postgres psql -U fitbot -d fitness_chatbot_dev
}

# Comando status - mostrar estado
cmd_status() {
    check_dependencies
    print_info "Estado de los servicios:"
    $DOCKER_COMPOSE ps
}

# Comando clean - limpiar todo
cmd_clean() {
    check_dependencies
    print_info "Limpiando todo (contenedores, vol√∫menes, im√°genes)..."
    $DOCKER_COMPOSE down -v --rmi all --remove-orphans
    print_success "Limpieza completa"
}

# Comando help - mostrar ayuda
cmd_help() {
    echo -e "${BLUE}üèãÔ∏è  Fitness Chatbot - Comandos disponibles:${NC}"
    echo ""
    echo "  ./dev start     - Iniciar entorno completo"
    echo "  ./dev stop      - Detener servicios"
    echo "  ./dev restart   - Reiniciar servicios"
    echo "  ./dev logs      - Ver logs en tiempo real"
    echo "  ./dev db        - Conectar a PostgreSQL"
    echo "  ./dev status    - Ver estado de servicios"
    echo "  ./dev clean     - Limpiar todo completamente"
    echo "  ./dev help      - Mostrar esta ayuda"
    echo ""
}

# Manejar comandos
case "${1:-start}" in
    "start"|"")
        cmd_start
        ;;
    "stop")
        cmd_stop
        ;;
    "restart")
        cmd_restart
        ;;
    "logs")
        cmd_logs
        ;;
    "db")
        cmd_db
        ;;
    "status")
        cmd_status
        ;;
    "clean")
        cmd_clean
        ;;
    "help"|"-h"|"--help")
        cmd_help
        ;;
    *)
        print_error "Comando desconocido: $1"
        cmd_help
        exit 1
        ;;
esac