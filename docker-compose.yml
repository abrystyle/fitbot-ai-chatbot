services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15
    container_name: fitness-chatbot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: fitness_chatbot_dev
      POSTGRES_USER: fitbot
      POSTGRES_PASSWORD: fitbot123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fitbot -d fitness_chatbot_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicación Next.js (desarrollo)
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: fitness-chatbot-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://fitbot:fitbot123@postgres:5432/fitness_chatbot_dev
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-nextauth-secret-key-for-development
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Esperando a que PostgreSQL esté listo...' &&
        npx prisma db push &&
        npx prisma generate &&
        echo 'Iniciando aplicación Next.js...' &&
        npm run dev
      "

  # Redis para caché (opcional para rate limiting y sesiones)
  redis:
    image: redis:7-alpine
    container_name: fitness-chatbot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Adminer para administración de base de datos
  adminer:
    image: adminer:4
    container_name: fitness-chatbot-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: fitness-chatbot-network